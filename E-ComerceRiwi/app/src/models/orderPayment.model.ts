// app/src/models/order_payment.model.ts

/**
 * order payment model
 * -----------------
 * This file defines the Sequelize `OrderPayment` model, which represents the `order paymentes` table in the database.
 *
 * It contains:
 * - Model attributes (`OrderPaymentAttributes`).
 * - Required attributes for creation (`OrderPaymentCreationAttributes`).
 * - Definition of the model with its columns and constraints.
 *
 * This model is used by services and controllers to perform CRUD operations.
 */
import { DataTypes, Model, Optional } from "sequelize";
import sequelize from "../config/database";

/**
 * Attributes for `OrderPayment`.
 */
export interface OrderPaymentAttributes {
    id_order_payment: number;
    order_id: number;
    payment_method_id: number;
    amount: number;
    payment_date: Date;
    is_active: boolean;
}

/**
 * Attributes used for creating a new order payment.
 * `Optional` is used to indicate that `id` is not required at the time
 * of creation, as it is automatically generated by the database.
 */
export interface OrderPaymentCreationAttributes extends Optional<OrderPaymentAttributes, "id_order_payment"> { }

/**
 * Class that represents the `OrderPayment` model in Sequelize.
 *
 * Implements the attributes defined in `OrderPaymentAttributes` and `OrderPaymentCreationAttributes`.
 */
class OrderPayment extends Model<OrderPaymentAttributes, OrderPaymentCreationAttributes> implements OrderPaymentAttributes {

    public id_order_payment!: number;
    public order_id !: number;
    public payment_method_id !: number;
    public amount !: number;
    public payment_date !: Date;
    public is_active!: boolean;
}

/**
 * Initialization of the `OrderPayment` model with Sequelize configuration.
 *
 * - `id_order_payment`: Auto-incrementing integer, primary key.
 * - `order_id`: Foreign key referencing the `orders` table.
 * - `payment_method_id`: Foreign key referencing the `payment_methods` table.
 * - `amount`: Decimal value representing the payment amount.
 * - `payment_date`: Date of the payment, defaults to the current date and time.
 * - `is_active`: Boolean to determine if the order payment is active or inactive.
 */
OrderPayment.init(
    {
        id_order_payment: {
            type: DataTypes.INTEGER,
            autoIncrement: true,
            primaryKey: true,
        },
        order_id: {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: "orders", 
                key: "id_order"
            }
        },
        payment_method_id: {
            type: DataTypes.INTEGER,
            allowNull: false,
            references: {
                model: "payment_methods", 
                key: "id_payment_method"
            }
        },
        amount: {
            type: DataTypes.DECIMAL(12, 2),
            allowNull: false,
        },
        payment_date: {
            type: DataTypes.DATE,
            allowNull: false,
            defaultValue: DataTypes.NOW,
        },
        is_active: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: true,
        }
    },
    {
        sequelize,
        modelName: "OrderPayment",   
        tableName: "order_payments",  
        timestamps: true,      
        createdAt: "created_at",
        updatedAt: "updated_at"
    }
);

export default OrderPayment;
